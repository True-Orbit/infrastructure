name: Migrate Core RDS

on:
  workflow_dispatch:
    inputs:
      environment:
        type: string
        required: false
        default: development
      core_server_image_tag:
        type: string
        required: false
        default: 'null'
      core_server_secrets:
        type: string
        required: false
        default: '[]'
      migrate:
        type: boolean
        required: false
        default: false
      seed:
        type: boolean
        required: false
        default: false

concurrency:
  group: "core_server-ec2-${{ inputs.environment }}"
  cancel-in-progress: false
        
env:
  AWS_REGION: us-west-2
  AWS_ECS_ROLE_ARN: ${{ secrets.AWS_ECS_ROLE_ARN }}
  ENVIRONMENT: ${{ inputs.environment }}
  
  TF_VAR_core_server_image_tag: ${{ inputs.core_server_image_tag }}
  TF_VAR_core_server_secrets: "${{ inputs.core_server_secrets || 'null' }}"

jobs:
  set_current_state:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    permissions:
      contents: read
      id-token: write

    defaults:
      run:
        shell: bash
        working-directory: true_orbit

    outputs:
      old_core_server_image_tag: ${{ steps.setOutput.outputs.old_core_server_image_tag }}
      old_core_server_secrets: ${{ steps.setOutput.outputs.old_core_server_secrets }}
      vpc_id: ${{ steps.setOutput.outputs.vpc_id }}
      subnet_id: ${{ steps.setOutput.outputs.subnet_id }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials and Assume Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ECS_ROLE_ARN }}
          role-session-name: DeployWebService

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.4
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Set current state in env vars
        shell: bash
        run: |
          chmod +x ./scripts/set_current_state.sh
          ./scripts/set_current_state.sh

      - name: Set output variables
        id: setOutput
        run: |
          echo "old_core_server_image_tag=$TF_VAR_old_core_server_image_tag" >> $GITHUB_OUTPUT
          echo "old_core_server_secrets=$TF_VAR_old_core_server_secrets" >> $GITHUB_OUTPUT
          echo "vpc_id=$vpc_id" >> $GITHUB_OUTPUT
          echo "subnet_id=$public_subnet_id" >> $GITHUB_OUTPUT

  deploy_core_server:
    needs: set_current_state
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    permissions:
      contents: read
      id-token: write

    defaults:
      run:
        shell: bash
        working-directory: core_server_ec2
      
    env:
      TF_VAR_vpc_id: ${{ needs.set_current_state.outputs.vpc_id }}
      TF_VAR_subnet_id: ${{ needs.set_current_state.outputs.subnet_id }}
      TF_VAR_old_core_server_image_tag: ${{ needs.set_current_state.outputs.old_core_server_image_tag }}
      TF_VAR_old_core_server_secrets: ${{ needs.set_current_state.outputs.old_core_server_secrets }}
      TF_VAR_migrate: ${{ inputs.migrate }}
      TF_VAR_seed: ${{ inputs.seed }}
      
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials and Assume Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ECS_ROLE_ARN }}
          role-session-name: DeployWebService

      - name: log
        run: |
          echo $TF_VAR_vpc_id
          echo $TF_VAR_subnet_id
          echo $TF_VAR_old_core_server_image_tag
          echo $TF_VAR_old_core_server_secrets

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.4
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=plan.out

      - name: Terraform Apply
        run: terraform apply -lock-timeout=5m -auto-approve -input=false plan.out

  destroy_instance:
    runs-on: ubuntu-latest
    needs: deploy_core_server
    defaults:
      run:
        shell: bash
        working-directory: core_server_ec2

    env:
      TF_VAR_vpc_id: ${{ inputs.vpc_id }}
      TF_VAR_subnet_id: ${{ inputs.subnet_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.4
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
          
          
